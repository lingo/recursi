var thumb = require('node-thumbnail').thumb;
var events = require('events');
var fs = require('fs');
var path = require('path');
var jade = require('jade');
var util = require('util');
var mime = require('mime');
var crypto = require('crypto');

// Template engine
var gen_files_view = jade.compile([
    '- each file in files',
    '  .file(data-path="#{file.path}", id="#{file.id}")',
    '    .icon',
    '      img(src="icons/#{file.type}.png")',
    '    .name #{file.name}',
].join('\n'));

// Our type
function Folder(app, jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element;
  this.app = app;

  var self = this;
  // Click on blank
  this.element.parent().on('click', function() {
    self.element.children('.focus').removeClass('focus');
  });
  // Click on file
  this.element.delegate('.file', 'click', function(e) {
    self.element.children('.focus').removeClass('focus');
    $(this).addClass('focus');
    e.stopPropagation();
  });
  // Double click on file
  this.element.delegate('.file', 'dblclick', function() {
    var file_path = $(this).attr('data-path');
    self.emit('navigate', file_path, mime.stat(file_path));
  });
}

util.inherits(Folder, events.EventEmitter);

Folder.prototype.open = function(dir) {
  var self = this;
  self.currentDir = dir;
  fs.readdir(dir, function(error, files) {
    var out = [];
    if (error) {
      console.log(error);
      window.alert(error);
      return;
    }
    for (var i = 0; i < files.length; ++i) {
      files[i] = mime.stat(path.join(dir, files[i]));
      var hash = crypto.createHash('sha1');
      hash.update(files[i].path);
      files[i].id = hash.digest('hex');
      if (files[i].type === 'image' || files[i].type === 'folder') {
        out.push(files[i]);
      }
    }

    self.element.html(gen_files_view({ files: out }));
    self.updateThumbnails(dir);
  });
}

Folder.prototype.updateThumbnails = function(dir, perItemCB, onCompleteCB) {
  var self = this;
  var width = self.app.thumbSize;
  console.group("Thumbnailing ", dir);
  if (typeof(dir) === 'undefined') {
    dir = self.currentDir;
  }

  var dest = path.join("" + self.app.app.dataPath, "/thumbs/");
  console.log('Thumbnail dest path', dest);
  thumb({
    width: width,
    source: dir,
    destination: dest,
    concurrency: 4,
    digest: true,
    
    perItemCallback: function(image, options, settings) {
      console.group(image);
      console.log('options', options);
      console.log('settings', settings);

      var hash = crypto.createHash('sha1');
      hash.update(options.srcPath);
      var id = hash.digest('hex');

      console.log("hashed path to html ID: ", options.srcPath, '=>', id);

      var elt = $('#' + id);
      if (elt.length) {
        console.log('updating HTML elt', elt);
        elt.attr('data-thumbpath', options.dstPath);
        elt.find('.icon img').attr('src', options.dstPath);
      } else {
        console.error('failed to find element for image',image,id);
      }
      console.groupEnd();
    }
  }, function() {
    if (typeof(onCompleteCB) === 'function') {
      onCompleteCB();
    }
    console.groupEnd();
  });
};

exports.Folder = Folder; 

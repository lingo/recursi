// node-thumbnail
// (c) 2011 Honza Pokorny
// Hacked and mogrified 2013 by Luke Hudson 
// Licensed under BSD
// https://github.com/honza/node-thumbnail

var fs     = require('fs');
var path   = require('path');
var crypto = require('crypto');
var im     = require('imagemagick');
var async  = require('async');
var _      = require('underscore');

var options, defaults, done;
var queue = null;

defaults = {
  suffix:      '_thumb',
  digest:      false,
  hashingType: 'sha1',
  width:       800,
  concurrency: 2
};

var extensions = [
  '.gif',
  '.GIF',
  '.jpg',
  '.jpeg',
  '.JPG',
  '.JPEG',
  '.png',
  '.PNG'
];


var createQueue = function(settings) {
  if (queue !== null) {
    return;
  }
  queue = async.queue(function (task, callback) {

    if (settings.digest) {
      var hash = crypto.createHash(settings.hashingType);
      hash.update(task.options.srcPath);
      var d = hash.digest('hex');
      var targetBase = d + '_' + settings.width + path.extname(task.options.srcPath);
      
      var destPath = settings.destination + '/' + d.substr(0,2);
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath);
      }

      task.options.dstPath = path.join(destPath, '/', targetBase);

      if (!fs.existsSync(task.options.dstPath)) {
        im.resize(task.options, function(err, stdout, stderr) {
          callback(task.options);
        });
      } else {
        callback(task.options);
      }
    } else {
      var name = task.options.srcPath;
      var ext  = path.extname(name);
      var base = path.basename(name, ext);

      task.options.dstPath = path.join(settings.destination, '/', base +
        settings.suffix + ext);

      im.resize(task.options, function(err, stdout, stderr) {
        callback(task.options);
      });
    }
      
  }, settings.concurrency);

  queue.drain = function() {
    if (done) {
      done();
    } else {
      console.log('all items have been processed');
    }
    queue = null;
  };
};


var run = function(settings) {
  var images = settings.images;
  console.log('thumb run', settings)
  images = _.reject(images, function(file) {
    return _.indexOf(extensions, path.extname(file.path)) === -1;
  });

  createQueue(settings);

  _.each(images, function(image) {

    options = {
      srcPath:    (image.path) ? image.path : image,
      width:      settings.width,
      customArgs: ['-flatten']
    };

    queue.push({options: options}, function(data) {
      // console.log('processed ',image, data, settings);
      if (typeof(settings.perItemCallback) === 'function') {
        settings.perItemCallback(image, data, settings);
      }
    });

  });
};


exports.thumb = function(options, callback, perItemCallback) {
  var settings;

  if (options.args) {
    if (options.args.length != 2) {
      console.log('Please provide source images and destination directory.');
      return;
    }

    options.images = options.args[0];
    options.destination = options.args[1];
    options.perItemCallback = perItemCallback;

  }

  if (fs.existsSync(options.destination)) {
    settings = _.defaults(options, defaults);
  } else {
    console.log("Destination doesn't exist.", options.source, options.destination);
    return;
  }

  if (callback) {
    done = callback;
  }

  run(settings);

};

exports.cancel = function() {
  if (queue)
    queue.tasks = []; // end all now!
};
var events = require('events');
var fs = require('fs');
var path = require('path');
var jade = require('jade');
var util = require('util');
var mime = require('mime');
var crypto = require('crypto');

// Template engine
var gen_files_view = jade.compile([
    '- each file in files',
    '  .file(data-path="#{file.path}", id="#{file.id}")',
    '    .icon',
    '      img(src="icons/#{file.type}.png")',
    '    .name #{file.name}',
].join('\n'));

// Our type
function ThumbSize(app, jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element;
  this.app = app;

  var self = this;
  // Update slider value
  this.element.on('change', function() {
    var size = $(this).val();
    self.emit('update', size);
  });
}

function Options(app, jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element;
  this.app = app;

  var self = this;
  // Update slider value
  this.element.find('.show-hidden').on('change', function() {
    self.app.showHidden = $(this).is(':checked');
    self.emit('reload');
  });
}

util.inherits(ThumbSize, events.EventEmitter);
util.inherits(Options, events.EventEmitter);

exports.ThumbSize = ThumbSize; 
exports.Options   = Options
